from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler
from credentials import Keys
from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu, default_callback_handler)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
        'help_with_resume': '–ü–æ–º–æ—â—å —Å —Ä–µ–∑—é–º–µ',
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

async def help_with_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "resume_profile"
    text = load_message("resume_profile")
    await send_photo(update, context, "resume_profile")
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")


async def help_with_resume_dialog(update, context):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["vacancy"] = text
        await send_text(update, context, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û")
    elif dialog.count == 2:
        dialog.user["fio"] = text
        await send_text(update, context, "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏")
    elif dialog.count == 3:
        dialog.user["experience"] = text
        await send_text(update, context, "–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç–µ?")
    elif dialog.count == 4:
        dialog.user["skills"] = text
        await send_text(update, context, "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    elif dialog.count == 5:
        dialog.user["qualification"] = text
        prompt = load_prompt("resume_profile")
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, context,
                                     "ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)

async def mode_handler(update, context):
    if dialog.mode == "resume_profile":
        await help_with_resume_dialog(update, context)


ob_keys = Keys()
dialog = Dialog()

chat_gpt = ChatGptService(ob_keys.gpt_token)
app = ApplicationBuilder().token(ob_keys.bot_token).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("random", random))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("talk", talk))
app.add_handler(CommandHandler("quiz", quiz))
app.add_handler(CommandHandler("help_with_resume", help_with_resume))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, mode_handler))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))

app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
